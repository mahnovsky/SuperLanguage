fn print(a, b)
{
	let f = 5 + b;
	let p = "fn test " + a;
	p = p + " hi";
	{
		__print("a: ", a, " b: ", b);
		#p = b - 1;
		
		__print("f: ", f);
	}
	__dump_callstack();
	return b + 45;
}

fn foo(t, k)
{
	let h = "foo" + k;
	let y = t * 3;

	prints(h);

	return y;
}
let res = foo(11, "test");
#__print("foo res: ", res);
let s = "hello" + " world";
__print(s);
s = s + " 1134";
let x = 12;
let y = 3 * ((x + 2) * (9 - 10));
y = 2.5 + 1;

let test = x * y / 9;
{
	let g = print(s, x);
	__print("print res: ", g);
	let miha = 15.0 / x;
	x = miha * y;
	{
		miha = 0;
	}
}


fn recursion_test(miha)
{
	if(miha > 0)
	{
		__print("miha val: ", miha);

		recursion_test(miha - 1);
	}
	else
	{
		__print("recursion end");

		#__exit(miha);
	}
}

recursion_test(5);
let arr = [1, 2, 3];
__set_array_element(arr, 1, "hello");
let c = 0;
let end = __get_array_size(arr);
while(c < end)
{
	let arr_element = __get_array_element(arr, c);

	__print("Array element[", c, "] = ", arr_element);

	c = c + 1;
}

let counter = 0;
while(counter < 12)
{
	__print("Iteration: ", counter);
	counter = counter + 1;
}

let boll = True;

if(boll)
{
	__print("yes");
}